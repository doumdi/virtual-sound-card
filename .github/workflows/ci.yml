name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-linux:
    name: Build and Test on Linux
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libasound2-dev libjack-jackd2-dev pkg-config
        
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake -DBUILD_LINUX=ON -DBUILD_TESTS=ON ..
        
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
        
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --verbose
        
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: linux-test-results
        path: |
          build/tests/
          build/**/*.wav
        if-no-files-found: ignore

  build-macos:
    name: Build and Test on macOS
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        # macOS comes with CoreAudio framework built-in
        brew install cmake jack pkg-config
        
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake -DBUILD_MACOS=ON -DBUILD_TESTS=ON ..
        
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
        
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --verbose
        
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: macos-test-results
        path: |
          build/tests/
          build/**/*.wav
        if-no-files-found: ignore

  build-windows:
    name: Build and Test on Windows
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
      
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake -DBUILD_WINDOWS=ON -DBUILD_TESTS=ON ..
        
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
        
    - name: Run tests
      run: |
        cd build
        ctest -C Release --output-on-failure --verbose
        
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: windows-test-results
        path: |
          build/tests/
          build/**/*.wav
        if-no-files-found: ignore

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    if: always()
    
    steps:
    - name: Check build results
      run: |
        echo "Build Summary:"
        echo "Linux: ${{ needs.build-linux.result }}"
        echo "macOS: ${{ needs.build-macos.result }}"
        echo "Windows: ${{ needs.build-windows.result }}"
        
        if [ "${{ needs.build-linux.result }}" != "success" ] || \
           [ "${{ needs.build-macos.result }}" != "success" ] || \
           [ "${{ needs.build-windows.result }}" != "success" ]; then
          echo "One or more builds failed!"
          exit 1
        fi
        echo "All builds succeeded!"
